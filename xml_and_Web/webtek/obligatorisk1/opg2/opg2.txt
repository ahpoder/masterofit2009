This assignment was solved by first implementing the HTML part (having the servlet emit the HTML) for the form. Then we decided to use XML to store the entries, så we modified some JDOM code from last semester for loading and saving Documents. We stored the path to the XML file as an init parameter in the WEB-INF file. Finally we added the post part for adding new entires to the XML. When deploying we realised we had to copy the jdom.jar file to the tomcat lib directory, but other than that it works like a charm. Then we tried with names that include HTML and it failed. The JDOM API ensures that the XML specific charecters, e.g. < and > are encoded, but when we write it to HTML it is not. We therefore added a htmlEscape method (from the book), and then it worked.

To simplify the code we have made certain assumptions. 

1. We control the init-param, so it is not necessary to validate that they exist.
2. If the XML database file is invalid or cannot be accessed (missing is OK), then the web-page simply display an error and no further processing is possible.
3. As we control the XML format completely validation of the document with e.g. a schema and validation in code is unnecesarry, we simply assume that the document is correct.
4. Since we assume a small number of visitors we allow the XML file to be read twice, once for post and once for get, even though caching from post to get would be possible, but it is believed that the caching would merely make the code more cluttered without improving performance notably. Furthermore we could improve performance by not using JDOM, but rather SAX to parse the file, and use an XML appender to write to it. This is possible as we always write to the end of the file, so we actually do not need to write the entire file back to the disk every time, as we do now. The SAX parsing would allow the entries to be written to he table one at a time without reading all the entries into memory first, as we do now.
5. We assume no simultaneous visitors, so we do not have to put resource protection on the XML file access. To support simultaneous access we need a mutex lock on the file, or a transaction safe database to store the data in.
6. We do not have to protect against malicious POST. This means we do not have to validate if a POST actually contain the expected parameters.
7. We do not have to protect against malicious users. This means we do not have to limit the number of entries possible, i.e. the size of the XML file.