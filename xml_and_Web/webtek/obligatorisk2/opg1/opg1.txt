//20100502/PMD:
Løsning af obligatorisk opgave 2, opg 1 

Opgaven er at implementere nogle tags (cart, add, process, empty, nonempy, loop, url) som får 
http://www.brics.dk/ixwt/examples/ShoppingTags.jsp (IXWT afsnit 10.2.3)
til at køre som 
http://www.brics.dk/ixwt/examples/ShoppingCart.jsp (IXWT afsnit 10.1.9)

ShoppingTags.jsp refererer de omtalte 7 tags.

Det ser ud til der skal gennemføres noget iteration (loop). Derfor får vi sandsynligvis brug for JSTL.
Hvordan får vi dette til at køre med tomcat 6.0?

Denne blog beskriver lidt om opsætning
http://www.mularien.com/blog/2008/04/24/how-to-reference-and-use-jstl-in-your-web-application/

Analyse af web.xml i min tomcat installation viser at jeg har Servlet version 2.5 
(<web-app xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
   version="2.5">)

Med lidt google lader det til, at flere har haft problemer med at finde jstl 1.2. Den endelige løsning er, at hente 
http://download.java.net/maven/glassfish/javax/servlet/jsp/jstl/jstl-api/1.2/jstl-api-1.2.jar
og
http://download.java.net/maven/glassfish/org/glassfish/web/jstl-impl/1.2/jstl-impl-1.2.jar
og lægge dem i WEB-INF/lib for den relevante applikation (ikke i Tomcat 6.0/lib som anbefalet nogle steder).

Indholdet af det sædvanlige c prefix erklæres på følgende måde i jsp-filen:
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

Med den sidste kører dette lille script

<%@taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<html>
  <head>
    <title>Count to 10 Example (using JSTL)</title>
  </head>
  <body>
    <c:forEach var="i" begin="1" end="10" step="1">
      <c:out value="${i}" />
      <br />
    </c:forEach>
  </body>
</html>

Hermed er der styr på brug af JSTL på vores tomcat installation.


Tilbage til løsning af opgaven.

Alle tags bliver til klasser i den af tomcat konstruerede java kode.

De forskellige tags er blevet til under følgende overvejelser:

cart.tag: 
Implementerer konstruktionen af en indkøbsvogn svarende til formuleringen i ShoppingCart.jsp. 
Medlemsvariablen 'cart' gemmes i det implicit deklarerede sessionsobjekt 'session' under navnet 'cart'.

add.tag: 
Implementerer tilføjelse af varer til indkøbsvognen ved at kopiere rutinen addToCart fra ShoppingCart.jsp. Til forskel fra ShoppingCart.jsp leveres 'cart' ikke som en parameter (attribute) til 'add.tag', men trækkes fra 'session' variablen 'cart'.
Med deklarering af 'item' og 'amount' som attributter, bliver de 'private' variable i 'add.tag'.

url.tag:
Indenfor url elementet skal ${url} være tilgængelig. Afhængigt af værdien af sin target attribut sættes værdien af 'url'.

empty.tag og nonempty.tag:
Udskriver sit indhold afhængigt af om 'cart' indeholder elementer eller ej.

process.tag:
Udskriver blot sit indhold

loop.tag:
Er implementeret som en iterator omkring jsp:doBody. Det betyder, at vi helt har undgået anvendelsen af JSTL. Øv for besværet med at finde ud af at installere.