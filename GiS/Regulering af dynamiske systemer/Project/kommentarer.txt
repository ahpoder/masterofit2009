Kommentarer:

1. Vi bør lige nævne at en anden ofte anvendt model af DC-motoren indeholder spole-induktans, men at vi ser bort fra den.
2. Vi bør prøve at få vores lining til at passe med den i eksemplet.
3. Alt det gamle tekst skal slettes og erstattes med det fra eksemplet (.pdf)
4. Ny eq. 15 som er eq. 14 med Kc = a2/b1 og Ac = a1/b1
5. Choosing constants for the car model
6. The direction of the arrow in the torque-diagram has to be turned so the Fm and torque is in opposite directions.

J = mass of car * (wheel radius)^2

k_ebsilon = k_tau

<horse power> * 714 = <effect> [W]. 
90 horse power = 7kW.

V * I = R, and if we need to get 7000 W to the endian at 12V, R has to be very small.

Comments of the model:

The ADC and DAC is seen as ideal with no delay and a perfect zero-order-hold and reconstruction filter (which is no practically possible). The same is true for the sensor, which instantly return the exact same value as the actual value.

Designing the regulator:

We need to choose a regulator that can meet our requirements. Ideally we want to keep the distance perfectly, but that is theoretically impossible, even with perfect acceleration. 

Even if we figure that there are no delay between the actual distance of the lead car and the regultor (this can be made small with a good sensor and fast sampling with good accuracy). And even if we choose a first order system with no delay (only dependent on the measured distance, not on the change) and have a perfect theoretical DAC. Then it is not possible to follow the lead car perfectly because the acceleration of the following car cannot be infinite, which would be required. We can however realise that it is a requirement that the maximum acceleration of the lead car must be smaller than the minimum acceleration of the follow-me vehicle. 

This will allow us to catch up to the lead vehicle no matter how fast it accelerates (both negative and positive (breaking - so we also need better breaks)). 

Assuming this is true then our job is to reduce the response time of the regulator as much as possible. Unfortunately this comes at a cost. If we want to quickly react to changes in the other cars velocity (and thereby its distance to us), we must quickly accelerate to catch up, and then, when we have caught up, decelerate, so we can keep the right distance. This is naturally possible, but would not make for very pleasent driving, as we would either be accellerating as much as possible or decellerating as much as possible - if you have ever tried to drive with an unexperienced driver who is afreid of the speeder, or one who mixes up the speeder and break, you know how that feels. 

Another matter is one of safety. If we are to follow at 3m distance, then it is not good if we overshoot this distance by e.g. 4 meters, as this means we have hit the lead wehicle. Based on this we can set a requirement thatwe must never have an overshoot of more than the reference distance (1).

To make this more specific an overshoot of 30% (leaving some for inaccuracies in the model, cooeficients and sampling) would be a good maximum value. 

Requirement 1: Maximum overshoot 30%

Another important aspect is stability. Stability of a first order system can be directly seen on a bode plot, where it is important that we have a phase-margin above 0 (i.e. less than -180 degrees). A good rule of thumb is to keep a phase-margin of at least 45%, which also leave some for inaccuracies in the model, cooeficients and sampling, and we will use this rule of thumb.

Requirement 2: Minimum phase margin 45 degrees.

As the overshot is closely related to the pahse margin it may not be possible to meet both of these requirements or one may infer the other. We will not know this until we begin the design.

Then there is the aspect of keeping the distance to the lead car accurate when the lead car is not making changes to its speed. This is called Steady-state error, and can be directly read from the regulators response to a unit step.

A unit step is defined as the value changing from 0 to 1 instantaniously, and then maintaining the 1. Even if the lead car makes multiple changes to its speed, but eventually remains at one speed, it will have the same steady-state error. 

For some systems it is not required to meet the desired value exactly, but we make this requirement.

Requirement 3: Steady-state error in response to a step = 0.

There is a very simple way of assuring this, and that is to make the system a type 1 system. Other systems are type 0 (a P system - a simple feedback with amplification), which do not have a 0 steady state error, and type 2, which has a steady-state error of 0 for both step and ramp. We have, however, no reason to have a steady-state error of 0 for a ramp, as it does not matter if we lag or lead a little when the lead car accilerate or decillerate, as long as we find the right distance eventually (and it is always better to choose as simple a system as possible).

This can be  realised with many different regulators, but keeping to the three main-stream regulators; P, PI and PID, we can see that we cannot use a P-regulator, as it is a type 0 system (it has a steady-state error != 0). We will however, for experiments sake, show how it could be used to implement the regulator, even if it will not be able to meet the stead-state error.

<<<Insert pure gain regulator simulation>>>

Many different gain's was attempted. The first thing we notice is that a negative gain is required for the system to be stable. This is due to the system itself: "If we are too far away we must try and reduce the distance". We then attempted to change the value of the gain, and the higher the gain the faster the system reached its steady-state, and the close it was to the correct value, but the higher overshot it had. At Gain = -1 it took about 80 seconds to reach steady-state and with no overshot, but a final value of approx. 22, or a steady-state error of 22 - 3 = 19 meter or 533%. At a gain of -10 it took only about 10 seconds to reach steady-state and we have an overshot of about 7%, and a steady-state error of 1.75. Since we allowed 30% overshot, we can have a gain of approximately -30, which gives us an overshot of 30% and a setling time of about 7 seconds with a steady.state error of 0.6. This is shown below.

<< insert diagram of pure gain regulator >>

In order to get a type 1 regulator we need an integrator in the regulator. This is represented as 1/s in laplace, and unfortunately has the concequence that the phase-response is moved down 90 degrees, reeking havock on our phase margin. To counter-act this effect we can add a zero in the equation, as this will move the pase-response up 90 degrees. Naturally these 90 degrees up or down are not in the entire phase-band, but only for a certain interval. Here an important stability rule comes in; if the highest frequency where the gain is 1 is higher than -180 degrees the system is stable. Even if there are lower frequencies where the pahse-margin is negative and the gain is > 1 - this may seem counter-intuitive, but it is true none the less.

In order to choose the cooeficients of the regulator, under the constraints above, and with a fourth requirement

Requirement 4: As fast a risetime (i.e. response time) as possible

we have to follow the below steps:

1. Realise that in order to have a steady-state error of zero we require to have a type 1 system, and that means having an integrator in the regulator. See figure of pure P-regulator for proof.
2. Having a pure integrator in the system will lower the phase-margin to a level where it is not possible to achieve the min 45 degree phase margin.
3. Adding a zero will lift the frequency response by 90 degrees in a "bubble", and as long as this "bubble" has the cross-over-frequency and it is above -135 degrees (required for 45 degrees phase-margin), then the system is stable.
4. We can now choose the highest possible P that will ensure a max. 30% overshot and have the best possible rise-time. This means choosing the P as high as possible, i.e. exactly where the 30% is just met.

----------- new --------------

First we add the pure integrator (Ki*1/s). Then we create a bode-plot of the open-loop system. This is done by first realizing that Ki must be negative, i.e. larger distance must result in increased power to the endien and not reduced, as is the "raw" functionality of the system. However open-loop transfer functions use a positive proportional gain, so we must use a P = -Ki. Second we must set the reference and disturbances to 0 and then multiply the transfer functions in the forward and feed-back path, giving us:

(Vfor) (regulator)         (model)         (integrator)   (feed-back path)
( 0   - (-P*1/s     *  0,06068/(s+1,1)) *     1/s      *        1

or 

P*(0,06068/(s^3+1,1s^2))

This can also be seen in the below diagram

<<< insert system from model_open_loop_integrator_regulator.mdl (new) >>>

This is possible as -P can then be written as -1 * P, and superposition allows us to interchange the multiplication terma. We realize that designing with integration and stability the value of P is of little importance in the beginning as we focus solely on the phase-carrecteristic, which is independent of P. We therefore choose a P of 1. This gives the following plot.

<<< insert open_loop_gain_integrator.fig (same as before) >>>

Here it may be seen that the open-loop system as a phase margin of -12, which is clearly unstable. It can further be seen that the system never reach a phase > -180 degrees, so the system wil be unstable for any value of P. It can furthermore be seen that increasing the phase margin by 90 degrees is sufficient to make the system stable. Increasing the phase can be echieved by adding a zero. 

Here it is important to realize that a zero do not increase the phase by 90 degrees over the whole frequency span, it will decreae with lower frequencies. In fact where we place the zero this decrease will be exactly 50%, or a phase increase of 45 degrees. 

With this knowledge we can determine the lowest possible frequency at which the zero may be placed. We know it must have a phase margin of at least 0 degrees in order to be stable (the 45 degree requirement comes later), i.e. a phase of -180 degrees. We also know that at the zero we will achieve a 45 degree phase lift, so we need to find the location where a 45 degree increase will give -180 degrees, or a current phase of -225. 

In the bode plot we can determine this to be at 1,1 rad/s. This naturally do not meet our 45 degree phase margin requirement, but finding the highest possible value of a that does meet this requirements is not so so easy - actually the calculations have a level of complexity that makes it benificial to use educated guessing and tweaking. We do however know that it must be less than 1,1 rad/s.

Before we begin determining the highest value of the zero we will just pause a little on the subject of ehy we want to do that. Since we can control the gain we can naturally create a 45 degree phase margin anywhere in the valid interval that we determine in a minute. Secondly we can choose to look at the cross-over frequency, as we want this to be as high as possible. Unfortunately the cross-over frequencies for different values of the zero is almost identical, so for this reason we choose based on the gain. We want the zero that creates the highest gain, as this will help supress changes in the system (response time). Changes (noise) is supressed by a factor of 1 + the open loop gain, and this happens to be the zero with the lowest possible frequency (highest possible value).

Now, to determine this value we have to try different value for the zero. We begin by an educated guess of a zero 1 factor 10 below the minimum zero stability-frequency found above of 1,1 rad/s, so we begin in 0,11 rad/s.

Using the sistool it is possible to graphically (drag and drop) modify the location of the zero and then see the effects of the frequency response. This makes it easier to determine the "highest possible" value of the zero. We also have to remember that it does not have to be the highest, as the lower values work just fine, they may just not be as good at keeping up, but as good can be a very small difference if we are talking about two zero values that are close together - there is such a thing as a "good enough" zero.

Using this tool we determine the zero to be at 0,19 rad/s, meaning that for any value inthe interval ]0;0,19] it is possible to have a P that gives us a phase margin of 45 degrees - for the reasons mentioned above we choose 0,19 rad/s as our zero, giving us the open-loop transfer funtion

P*((0,06068 + 0,01153)/(s^3+1,1s^2))

From this we can determine the P required to achieve a 45 degree phase margin, and this turns out to be P = 8. Putting this into the transfer funtion the new bode plot becomes

<<< insert open_loop_gain_PI_regulator.fig (new) >>>

We place this in the model and attempt to modify the gain to achieve an overshot of max. 30%. We realize that this is not possible, as we do not accilerate fast enough to keep up with the lead car's step speed (infinite accileration), which is also unrealistic. We therefore only look at the second loop in the figure - how much the distance swings under the curve. This gives us a gain of -150 (we remember from earlier that the gain has to be negative). The actual overshot will be smaller, as it is not possible for the lead car to accilerate as a step, only as a ramp.

------------- end of new ------------------

------------- new PID ---------------------

This regulator actually follow the lead car quite well, but you may be thinking: "I can follow just as well as the regulator". 

The problem is that the system do not take the lead car's change in speed into account. If the lead car changes speed fast, we should accelerate fast to catch up, and if it only slowly changes speed, we should also only alter our speed slightly in order not to over-shoot too much.

This may be resolved by ading a D (Differentiator). In order to do this we are going to reqrite the regulator to show the individual parts P, I and D. Furthermore Simulink do not permit a transfer funtion with more zeros than poles, so we have to give the differentiator a pole somewhere where it will not do any damage - we chose a pole in 100 rad/s. The resulting regulator may be seen in figure nn.

<<< insert figure nn : model_PID_regulator.mdl >>>

Here we have already assigned values for Kp, Td and Ti, so we better devote a little time to how we got these values. A rule of thumb is to ignore the differentiator (set Td to 0) and tune the regulator, and then Td can be found as 20 times Ti. Luckily we have already tuned the PI regulator, so we can just use the values from there. Here we have to remember that we rewrote the layout of the regulator, so we have to change the format of 

-150 * (s+0,19)/s to the form of Kp * (1 + 1/Ti * 1/s). This is done simply by multiplying:

(-150s -28,5)/s => -150s/s + -28,5/s => -150 + (-28,5)*s => -150 + (-28,5) * 1/s => -150 * (1 + 0,19 * 1/s) => -150 * (1 + 1/5,26316 * 1/s), i.e. Kp = -150 and Ti = 5,263

Using the rule of thumb this makes Td = 5,263 * 20 = 105,26

When we simulate the unit step we can see a massive improvement in response time and overshot. The rise-time is almost halved and there is no osscillation at all, only an initial overshot way below the 30%. The distadvantage of the D is that it becomes highly sensitive to rapid changes in speed. Naturally a car is not capable of changing speed as a step, or having samples jump many km/h from one to the other. However, this may happen in case of an error.

This problem of error tollerance may be resolved by adding in a low-pass filter. As we know the lead-cars maximum acceleration, we also know the maximum angle of the velosity-ramp that this would generate. Based on this we can determine the frequency content of this ramp, which will give up the highest possible frequency that may realisticly be part of the system. If any frequency above this is found in the sampled distance, then it must be an error. To imagine this think of a step. In order to create a theoretical step you must include all frequencies up at infinity. The more vertivcal a curve, the higer the frequencies it contain. 

Removing these errors are done simply by adding a low-pass filter after the ADC, which will insure that any incorrect values will be removed. This filter is easy to design, but will not be shown here.

Conclusion

When we simulate our PI regulated system with the lead-car supplied, see figure bb, we get the distance-chart shown in figure mm. If we can see that we generally follow the lead car quite well (once we catch up. The lead car starts at 80km/h and we start at 0, so it is kind of unfair to the regulator). 

<<< Figure mm. PI regulator with lead full 2200 seconds >>>

If we zoome in on the different parts where a change happens:

* 0s (we start at 80 km/h)
* 300s (we accilerate as a ramp)
* 500s (we stop accilerating and maintain a speed of 90km/h)
* 1000s (we instantly change to a speed of 80km/h)
* 2000s (an incorrect reading of 72km/h is supplied)
* 2010s (an incorrect reading of 88km/h is supplied)

<<< TODO should we show these figures??? >>>

we can see that ....

Using the PID regulator we have a bit of a problem. Simulink will not allow us to simulate the full 2200 or so seconds in one go. It just results in garbage. This makes the simulation difficult, as we can only look at 100s at a time. We are not going to show all of these sub-plots, but merely show the initial 0 - 100s plot, so it is possibelt o compare to the PI-regulator. This is shown in Figure nn

<<Figure nn. PID regulator with lead car first 100s>>>